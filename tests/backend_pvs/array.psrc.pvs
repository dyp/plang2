A : THEORY
BEGIN

ArrType : TYPE =
    [{d: nat | (e <= 4) AND (e >= 1)} -> nat]

Range : TYPE =
    {e: nat | (e <= 4) AND (e >= 1)}

a_cons : [{f: nat | (e <= 4) AND (e >= 1)} -> nat] =
    LAMBDA (g: {h: nat | h < 4}) : nat =
        COND
            g = 0 -> 1,
            g = 1 -> 2,
            g = 2 -> 3,
            g = 3 -> 4
        ENDCOND

b_cons (arr: [{k: nat | (e <= 4) AND (e >= 1)} -> nat]) : [{k: nat | (e <= 4) AND (e >= 1)} -> nat] =
    LAMBDA (i: nat) : nat =
        COND
            (i <= 2) AND (i >= 1) -> 0,
            i = 3 -> 1,
            ELSE -> arr(i)
        ENDCOND

c_cons : [[{l: nat | (m <= 3) AND (m >= 1)}, {l: nat | (m <= 3) AND (m >= 1)}] -> nat] =
    LAMBDA (i: {n: nat | (m <= 3) AND (m >= 1)}, j: {n: nat | (m <= 3) AND (m >= 1)}) : nat =
        COND
            (i = 1) AND (j = 1) -> 0,
            (i <= 3) AND (i >= 2) AND (j <= 3) AND (j >= 2) -> 1,
            ELSE -> 2
        ENDCOND

a : [{o: nat | (e <= 4) AND (e >= 1)} -> nat] =
    LAMBDA (p: {q: nat | q < 4}) : nat =
        COND
            p = 0 -> 1,
            p = 1 -> 2,
            p = 2 -> 3,
            p = 3 -> 4
        ENDCOND

b : [{o: nat | (e <= 4) AND (e >= 1)} -> nat] =
    LAMBDA (i: nat) : nat =
        COND
            (i <= 2) AND (i >= 1) -> 0,
            ELSE -> 2 * i
        ENDCOND

e1 : nat =
    a(1) + a(2) + a(3)

e2 : nat =
    b(1) + b(2) + b(3)

Array1 : TYPE =
    [[{r: nat | (m <= 3) AND (m >= 1)}, {r: nat | (m <= 3) AND (m >= 1)}] -> nat]

Dim : TYPE =
    {m: nat | (m <= 3) AND (m >= 1)}

c : [[{s: nat | (m <= 3) AND (m >= 1)}, {s: nat | (m <= 3) AND (m >= 1)}] -> nat] =
    LAMBDA (i: {t: nat | (m <= 3) AND (m >= 1)}, j: {t: nat | (m <= 3) AND (m >= 1)}) : nat =
        COND
            (i = 1) AND (j = 1) -> 0,
            (i <= 3) AND (i >= 2) AND (j <= 3) AND (j >= 2) -> 1,
            ELSE -> 2
        ENDCOND

e3 : [{u: nat | (m <= 3) AND (m >= 1)} -> nat] =
    restrict[[{v: nat | (m >= 1) AND (m <= 3)}, {v: nat | (m >= 1) AND (m <= 3)}], [{w: nat | (w <= 2) AND (w >= 1)}, {x: nat | (x <= 3) AND (x >= 1)}], nat] (c)

LEMMA
    FORALL (a: [{y: nat | (e <= 4) AND (e >= 1)} -> nat]): a = a_cons

LEMMA
    FORALL (a: [{z: nat | (e <= 4) AND (e >= 1)} -> nat], b: [{z: nat | (e <= 4) AND (e >= 1)} -> nat]): b = b_cons(a)

LEMMA
    FORALL (c: [[{ba: nat | (m <= 3) AND (m >= 1)}, {ba: nat | (m <= 3) AND (m >= 1)}] -> nat]): c = c_cons

END A

